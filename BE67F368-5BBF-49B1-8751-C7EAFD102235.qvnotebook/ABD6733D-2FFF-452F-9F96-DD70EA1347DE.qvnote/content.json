{
  "title": "No.36 상속받은 비가상 함수를 파생 클래스에서 재 정의하는 것은 절대 금물",
  "cells": [
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class B {\npublic:\n    void mf();\n    ...\n};\n\nclass D {\n    ...\n};"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "D x;            // x 는 D타입으로 생성된 객체\n\nB * pB = &X;    // x 에 대한 포인터를 얻어냄\npB->mf();       // 이 포인터를 통해 mf 를 호출\n// 위 코드는 아래 코드 처럼 동작해야 한다라고 여김\nD * pD = &x     // x 에 대한 포인터를 얻어냄\npD->mf();       // 이 포인터를 통해 mf 를 호출"
    },
    {
      "type": "text",
      "data": "양쪽 코드 둘다 x 객체로 부터 mf 멤버 함수를 호출하기 때문에 같은 동작이 아니면 이상하게 여길수 있다.<div>함수도 같고, 객체도 똑같으니 동작도 같아야 하는게 맞다고 여긴다.</div><div><br></div><div>그렇지만 다를수도 있다는게 문제이다.</div><div>특히 mf 가 비 가상함수이고 D 클래스가 자체적으로 mf 함수를 또 정의하고 있으면 생각과는 다른 동작을 할수 있다.</div>"
    },
    {
      "type": "code",
      "language": "c_cpp",
      "data": "class D : public B {\npublic:\n    void mf();      // B:mf 를 가려버린다.\n    ...\n};\n\npB->mf();           // B::mf 를 호출\npD->mf();           // D::mf 를 호출"
    },
    {
      "type": "text",
      "data": "이렇게 다른 동작하는 이유는 비 가상함수는 정적 바인딩(static binding)으로 묶이기 때문이다.(No.37)<div>pB 는 ‘B 에 대한 포인터’ 타입으로 선언되었기 때문에, &nbsp;pB를 통해 호출되는 비 가상 함수는 항상 B클래스에 정의 되어있을 것이라고 결정한다. 심지어 B 에서 파생된 객체를 pB가 가리키고 있다고 해도 마찬가지다.</div><div><br></div><div>가상함수의 경우 동적 바인딩(dynamic binding)으로 묶인다.</div><div>mf 함수가 가상함수였다면 mf 가 pB에서 호출되든 pD에서 호출되든 D:mf를 호출한다.&nbsp;</div><div><br></div><div><ul><li>바인딩이란?&nbsp;프로그램 소스에 쓰인 각종 내부요소, 이름 식별자에 대해 값 혹은 속성을 확정하는 과정을 일컫는다.</li></ul></div><div><br></div><div>D 클래스를 (B클래스로 부터 파생시켜) 만드는 도중에 B 클래스로 부터 물려받은 비 가상함수 mf 를 재정의해 버리면, &nbsp;D 클래스는 일관성 없는 동작을 보이는 이상한 클래스가 된다. 분명히 D 객체인데도, 이 객체에서 mf 를 호출하면 B 와 D 중 어디로 갈지 모른다. 게다가 B 냐 D 냐를 결정하는 요인이 해당 객체 자신이 아니라, 그 객체를 가리키는 포인터 타입이란 점이다.</div><div><br></div><div><ol><li>public 상속의 의미는 “is-a”(No.32)</li><li>비 가상 멤버 함수는 클래스 파생에 관계없는 불변동작을 정해 둠(No.34)</li></ol></div><div>위 2가지 포인트를 B,D 클래스 및 비 가상 함수 인 B:mf 에 그대로 가져가면 아래와 같다.</div><div><ul><li>B 객체에 해당되는 모든 것들이 D 객체에 그대로 적용 ( D 객체는 B 객체의 일종 )</li><li>B 에서 파생된 클래스는 mf 함수의 인터페이스와 구현을 모두 물려 받는다. (mf는 B &nbsp;클래스에서 비가상함수)</li></ul></div><div><br></div><div><br></div><div><b>상속받은 비가상함수를 재 정의하는 일은 절대로 하지 말자.</b></div>"
    }
  ]
}